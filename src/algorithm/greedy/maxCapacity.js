/**
 * NOTE: 最大容量问题
 * 输入一个数组 ht ，数组中的每个元素代表一个垂直隔板的高度。数组中的任意两个隔板，以及它们之间的空间可以组成一个容器。容器的容量等于高度和宽度的乘积（即面积），其中高度由较短的隔板决定，宽度是两个隔板的数组索引之差。请在数组中选择两个隔板，使得组成的容器的容量最大，返回最大容量。
 * @param {Number[]} ht 隔板高度
 */
function maxCapacity(ht) {
  const n = ht.length
  let i = 0,
    j = n - 1
  let cap = 0
  while (i < j) {
    cap = Math.max(cap, Math.min(ht[i], ht[j]) * (j - i))
    // 将短板向内移动
    if (ht[i] < ht[j]) {
      i++
    } else {
      j--
    }
  }
  return cap
}

/**
 * 贪心策略：
 * 先找出 i,j 中的短板，将短板向内移动一格，计算当前 cap，并与之前的值比较取更大值。
 * 策略正确性：
 * i,j 对应的隔板必有一个更短，若我们将长板向内移动，则会导致面积区域的宽度减小，但高度由短板高度决定，此时高度一定是不变或是变小的，故面积一定也是不变或变小的，所以可以跳过长板的向内移动，直接移动短板。
 * 移动短板的思路同长板相反。
 */

console.log(maxCapacity([3, 8, 5, 2, 7, 7, 3, 4]))
